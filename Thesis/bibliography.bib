@article{runtimeVerification,
  doi = {10.1017/s0956796820000210},
  url = {https://doi.org/10.1017/s0956796820000210},
  year = {2020},
  publisher = {Cambridge University Press ({CUP})},
  volume = {30},
  author = {Ivan Perez and Henrik Nilsson},
  title = {Runtime verification and validation of functional reactive systems},
  journal = {Journal of Functional Programming}
}
@inproceedings{LogicInCS,
  title={Logic in computer science - modelling and reasoning about systems (2. ed.)},
  author={Michael Huth and Mark Ryan},
  year={2000}
}
@article{rattus,
  doi = {10.1017/s0956796822000132},
  url = {https://doi.org/10.1017/s0956796822000132},
  year = {2022},
  publisher = {Cambridge University Press ({CUP})},
  volume = {32},
  author = {Patrick Bahr},
  title = {Modal {FRP} for all: Functional reactive programming without space leaks in Haskell},
  journal = {Journal of Functional Programming}
}
@article{quickstrom,
    title={Quickstrom: Property-based acceptance testing with LTL specifications}, 
    DOI={10.5281/zenodo.6416483}, 
    abstractNote={<p>This is the research artifact for peer review, for the Quickstrom property-based testing tool.<br> <br> Please see the attached README.txt for more information.</p>}, publisher={Zenodo},
    author={O'Connor, Liam and Wickström, Oskar},
    year={2022},
}
@article{quickCheck,
  doi = {10.1145/357766.351266},
  url = {https://doi.org/10.1145/357766.351266},
  year = {2000},
  publisher = {Association for Computing Machinery ({ACM})},
  volume = {35},
  number = {9},
  pages = {268--279},
  author = {Koen Claessen and John Hughes},
  title = {{QuickCheck}},
  journal = {{ACM} {SIGPLAN} Notices}
}
@incollection{yampa,
  doi = {10.1007/978-3-540-44833-4_6},
  url = {https://doi.org/10.1007/978-3-540-44833-4_6},
  year = {2003},
  publisher = {Springer Berlin Heidelberg},
  pages = {159--187},
  author = {Paul Hudak and Antony Courtney and Henrik Nilsson and John Peterson},
  title = {Arrows,  Robots,  and Functional Reactive Programming},
  booktitle = {Advanced Functional Programming}
}
 @InProceedings{fran,
   title        = {Functional Reactive Animation},
   url          = {http://conal.net/papers/icfp97/},
   author       = "Conal Elliott and Paul Hudak",
   booktitle    = "International Conference on Functional Programming",
   year         = 1997
 }
 @inproceedings{10.1145/507635.507664,
author = {Paterson, Ross},
title = {A New Notation for Arrows},
year = {2001},
isbn = {1581134150},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/507635.507664},
doi = {10.1145/507635.507664},
abstract = {The categorical notion of monad, used by Moggi to structure denotational descriptions, has proved to be a powerful tool for structuring combinator libraries. Moreover, the monadic programming style provides a convenient syntax for many kinds of computation, so that each library defines a new sublanguage. Recently, several workers have proposed a generalization of monads, called variously "arrows" or Freyd-categories. The extra generality promises to increase the power, expressiveness and efficiency of the embedded approach, but does not mesh as well with the native abstraction and application. Definitions are typically given in a point-free style, which is useful for proving general properties, but can be awkward for programming specific instances. In this paper we define a simple extension to the functional language Haskell that makes these new notions of computation more convenient to use. Our language is similar to the monadic style, and has similar reasoning properties. Moreover, it is extensible, in the sense that new combining forms can be defined as expressions in the host language.},
booktitle = {Proceedings of the Sixth ACM SIGPLAN International Conference on Functional Programming},
pages = {229–240},
numpages = {12},
location = {Florence, Italy},
series = {ICFP '01}
}
@inproceedings{10.1145/2500365.2500588,
author = {Krishnaswami, Neelakantan R.},
title = {Higher-Order Functional Reactive Programming without Spacetime Leaks},
year = {2013},
isbn = {9781450323260},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2500365.2500588},
doi = {10.1145/2500365.2500588},
abstract = {Functional reactive programming (FRP) is an elegant approach to declaratively specify reactive systems. However, the powerful abstractions of FRP have historically made it difficult to predict and control the resource usage of programs written in this style.In this paper, we give a new language for higher-order reactive programming. Our language generalizes and simplifies prior type systems for reactive programming, by supporting the use of streams of streams, first-class functions, and higher-order operations. We also support many temporal operations beyond streams, such as terminatable streams, events, and even resumptions with first-class schedulers. Furthermore, our language supports an efficient implementation strategy permitting us to eagerly deallocate old values and statically rule out spacetime leaks, a notorious source of inefficiency in reactive programs. Furthermore, these memory guarantees are achieved without the use of a complex substructural type discipline.We also show that our implementation strategy of eager deallocation is safe, by showing the soundness of our type system with a novel step-indexed Kripke logical relation.},
booktitle = {Proceedings of the 18th ACM SIGPLAN International Conference on Functional Programming},
pages = {221–232},
numpages = {12},
keywords = {kripke logical relations, comonads, dataflow, guarded recursion, temporal logic, capabilities, functional reactive programming},
location = {Boston, Massachusetts, USA},
series = {ICFP '13}
}

@article{KrishanType,
author = {Krishnaswami, Neelakantan R.},
title = {Higher-Order Functional Reactive Programming without Spacetime Leaks},
year = {2013},
issue_date = {September 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {48},
number = {9},
issn = {0362-1340},
url = {https://doi.org/10.1145/2544174.2500588},
doi = {10.1145/2544174.2500588},
abstract = {Functional reactive programming (FRP) is an elegant approach to declaratively specify reactive systems. However, the powerful abstractions of FRP have historically made it difficult to predict and control the resource usage of programs written in this style.In this paper, we give a new language for higher-order reactive programming. Our language generalizes and simplifies prior type systems for reactive programming, by supporting the use of streams of streams, first-class functions, and higher-order operations. We also support many temporal operations beyond streams, such as terminatable streams, events, and even resumptions with first-class schedulers. Furthermore, our language supports an efficient implementation strategy permitting us to eagerly deallocate old values and statically rule out spacetime leaks, a notorious source of inefficiency in reactive programs. Furthermore, these memory guarantees are achieved without the use of a complex substructural type discipline.We also show that our implementation strategy of eager deallocation is safe, by showing the soundness of our type system with a novel step-indexed Kripke logical relation.},
journal = {SIGPLAN Not.},
pages = {221–232},
numpages = {12},
keywords = {kripke logical relations, comonads, capabilities, dataflow, temporal logic, functional reactive programming, guarded recursion}
}


@article{paterson,
author = {Paterson, Ross},
title = {A New Notation for Arrows},
year = {2001},
issue_date = {October 2001},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {36},
number = {10},
issn = {0362-1340},
url = {https://doi.org/10.1145/507669.507664},
doi = {10.1145/507669.507664},
journal = {SIGPLAN Not.},
pages = {229–240},
numpages = {12}
}



