module LibOld
    ( run
    ) where

import qualified Data.Text.IO as T
import Test.QuickCheck 
import Control.Monad.Writer 

quicksort' [] = []
quicksort' (p:xs) =
    let smaller =  filter (< p) xs
        larger =  filter (>= p) xs
    in quicksort' smaller ++ [p] ++ quicksort' larger

testSort sorter = 
    let isSorted (x1:x2:xs) = x1 <= x2 && isSorted (x2:xs)
        isSorted _ = True 
    in all (isSorted . sorter) [[],[1],[1,2],[2,1],[-1,1]]

logNumber :: Int -> Writer [String] Int 
logNumber x = writer (x, ["Got number: " ++ show x])
multWithLog :: Writer [String] Int 
multWithLog = do 
    a <- logNumber 3
    b <- logNumber 5
    return (a*b)

myRev :: [Int] -> [Int] 
myRev = foldl (\reverseList element -> element:reverseList) [] 
run :: IO ()
run = do
    T.putStrLn "someFunc"
    quickCheck (\x -> fromIntegral (x::Int) < 100)
    quickCheck (\xs -> reverse xs == myRev xs)
    print $ runWriter multWithLog





